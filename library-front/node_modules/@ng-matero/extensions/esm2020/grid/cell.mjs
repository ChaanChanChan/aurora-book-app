import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, } from '@angular/core';
import PhotoViewer from 'photoviewer';
import * as i0 from "@angular/core";
import * as i1 from "@ng-matero/extensions/dialog";
import * as i2 from "./grid-utils";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/chips";
import * as i6 from "@angular/material/tooltip";
import * as i7 from "@angular/material/icon";
import * as i8 from "@ng-matero/extensions/core";
import * as i9 from "./grid-pipes";
export class MtxGridCell {
    get _value() {
        return this._utils.getCellValue(this.rowData, this.colDef);
    }
    constructor(_dialog, _utils, _differs, _changeDetectorRef) {
        this._dialog = _dialog;
        this._utils = _utils;
        this._differs = _differs;
        this._changeDetectorRef = _changeDetectorRef;
        /** Row data */
        this.rowData = {};
        /** Table data */
        this.data = [];
        /** Whether show summary */
        this.summary = false;
        /** Placeholder for the empty value (`null`, `''`, `[]`) */
        this.placeholder = '--';
        this.rowDataChange = new EventEmitter();
    }
    ngOnInit() {
        this.rowDataDiffer = this._differs.find(this.rowData).create();
    }
    ngDoCheck() {
        const changes = this.rowDataDiffer?.diff(this.rowData);
        if (changes) {
            this._applyChanges(changes);
        }
    }
    _applyChanges(changes) {
        changes.forEachChangedItem(record => {
            this.rowChangeRecord = record;
            this.rowDataChange.emit(record);
            this._changeDetectorRef.markForCheck();
        });
    }
    _getText(value) {
        return value === undefined ? '' : this._utils.isEmpty(value) ? this.placeholder : value;
    }
    _getTooltip(value) {
        return this._utils.isEmpty(value) ? '' : value;
    }
    _getFormatterTooltip(value) {
        return this._utils.isContainHTML(value) || this._utils.isEmpty(value) ? '' : value;
    }
    _onActionClick(event, btn, rowData) {
        event.preventDefault();
        event.stopPropagation();
        if (btn.pop) {
            this._dialog.open({
                title: btn.pop?.title,
                description: btn.pop?.description,
                buttons: [
                    {
                        color: btn.pop?.okColor || 'primary',
                        text: btn.pop?.okText || 'OK',
                        onClick: () => btn.click?.(rowData) || {},
                    },
                    {
                        color: btn.pop?.closeColor,
                        text: btn.pop?.closeText || 'CLOSE',
                        onClick: () => { },
                    },
                ],
            });
        }
        else {
            btn.click?.(rowData);
        }
    }
    /** Preview enlarged image */
    _onImagePreview(urlStr) {
        const imgs = [];
        this._utils.str2arr(urlStr).forEach((url, index) => {
            imgs.push({ title: index + 1 + '', src: url });
        });
        const footerToolbar = imgs.length > 1
            ? ['zoomIn', 'zoomOut', 'prev', 'next', 'rotateRight', 'rotateLeft', 'actualSize']
            : ['zoomIn', 'zoomOut', 'rotateRight', 'rotateLeft', 'actualSize'];
        const options = {
            title: imgs.length > 1,
            footerToolbar,
        };
        const photoviewer = new PhotoViewer(imgs, options);
    }
}
/** @nocollapse */ MtxGridCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCell, deps: [{ token: i1.MtxDialog }, { token: i2.MtxGridUtils }, { token: i0.KeyValueDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MtxGridCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.1", type: MtxGridCell, selector: "mtx-grid-cell", inputs: { rowData: "rowData", colDef: "colDef", data: "data", summary: "summary", placeholder: "placeholder" }, outputs: { rowDataChange: "rowDataChange" }, exportAs: ["mtxGridCell"], ngImport: i0, template: "<span *ngIf=\"summary; else customCellFormattingTpl\"\r\n      [title]=\"_getFormatterTooltip((data | cellSummary: colDef))\"\r\n      [innerHTML]=\"_getText((data | cellSummary: colDef))\">\r\n</span>\r\n\r\n<!-- Custom formatting -->\r\n<ng-template #customCellFormattingTpl>\r\n  <span *ngIf=\"colDef.formatter; else defaultCellFormattingTpl\"\r\n        [title]=\"_getFormatterTooltip(colDef.formatter(rowData, colDef))\"\r\n        [innerHTML]=\"_getText(colDef.formatter(rowData, colDef))\">\r\n  </span>\r\n</ng-template>\r\n\r\n<!-- Default formatting -->\r\n<ng-template #defaultCellFormattingTpl>\r\n  <ng-container [ngSwitch]=\"colDef.type\">\r\n    <!-- Tag -->\r\n    <ng-container *ngSwitchCase=\"'tag'\">\r\n      <mat-chip-listbox *ngIf=\"colDef.tag && colDef.tag[_value]; else tagEmptyTpl\">\r\n        <mat-chip color=\"primary\" [ngClass]=\"['bg-' + colDef.tag[_value].color]\">\r\n          {{colDef.tag[_value].text}}\r\n        </mat-chip>\r\n      </mat-chip-listbox>\r\n      <ng-template #tagEmptyTpl>{{_value}}</ng-template>\r\n    </ng-container>\r\n    <!-- Buttons -->\r\n    <ng-container *ngSwitchCase=\"'button'\">\r\n      <ng-container *ngFor=\"let btn of colDef.buttons;\">\r\n        <ng-container *ngIf=\"!btn.iif || btn.iif(rowData)\">\r\n          <button *ngIf=\"btn.type==='basic'\" type=\"button\"\r\n                  [ngClass]=\"['mtx-grid-action-button', btn.class||'']\"\r\n                  mat-button [color]=\"btn.color || 'primary'\"\r\n                  [disabled]=\"(btn | cellActionDisable: rowData: rowChangeRecord: rowChangeRecord?.currentValue)\"\r\n                  [matTooltip]=\"(btn | cellActionTooltip).message | toObservable | async\"\r\n                  [matTooltipClass]=\"(btn | cellActionTooltip).class\"\r\n                  [matTooltipHideDelay]=\"(btn | cellActionTooltip).hideDelay\"\r\n                  [matTooltipShowDelay]=\"(btn | cellActionTooltip).showDelay\"\r\n                  [matTooltipPosition]=\"(btn | cellActionTooltip).position || 'below'\"\r\n                  [matTooltipTouchGestures]=\"(btn | cellActionTooltip).touchGestures || 'auto'\"\r\n                  (click)=\"_onActionClick($event, btn, rowData)\">\r\n            <mat-icon class=\"mtx-grid-icon\" *ngIf=\"btn.icon\">{{btn.icon}}</mat-icon>\r\n            <span>{{btn.text | toObservable | async}}</span>\r\n          </button>\r\n          <button *ngIf=\"!btn.type || btn.type==='icon'\" type=\"button\"\r\n                  [ngClass]=\"['mtx-grid-action-button', btn.class||'']\"\r\n                  mat-icon-button [color]=\"btn.color || 'primary'\"\r\n                  [disabled]=\"(btn | cellActionDisable: rowData: rowChangeRecord: rowChangeRecord?.currentValue)\"\r\n                  [matTooltip]=\"(btn | cellActionTooltip).message | toObservable | async\"\r\n                  [matTooltipClass]=\"(btn | cellActionTooltip).class\"\r\n                  [matTooltipHideDelay]=\"(btn | cellActionTooltip).hideDelay\"\r\n                  [matTooltipShowDelay]=\"(btn | cellActionTooltip).showDelay\"\r\n                  [matTooltipPosition]=\"(btn | cellActionTooltip).position || 'below'\"\r\n                  [matTooltipTouchGestures]=\"(btn | cellActionTooltip).touchGestures || 'auto'\"\r\n                  (click)=\"_onActionClick($event, btn, rowData)\">\r\n            <mat-icon class=\"mtx-grid-icon\">{{btn.icon}}</mat-icon>\r\n          </button>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <!-- Link -->\r\n    <ng-container *ngSwitchCase=\"'link'\">\r\n      <a [href]=\"_value\" target=\"_blank\">{{_value}}</a>\r\n    </ng-container>\r\n    <!-- Image -->\r\n    <ng-container *ngSwitchCase=\"'image'\">\r\n      <img class=\"mtx-grid-img\" [src]=\"_value\" (click)=\"_onImagePreview(_value)\">\r\n    </ng-container>\r\n    <!-- Boolean -->\r\n    <ng-container *ngSwitchCase=\"'boolean'\">\r\n      <span [title]=\"_getTooltip(_value)\">{{_getText(_value)}}</span>\r\n    </ng-container>\r\n    <!-- Number -->\r\n    <ng-container *ngSwitchCase=\"'number'\">\r\n      <span [title]=\"_getTooltip(_value | number: colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | number: colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Currency -->\r\n    <ng-container *ngSwitchCase=\"'currency'\">\r\n      <span [title]=\"_getTooltip(_value | currency: colDef.typeParameter?.currencyCode:\r\n      colDef.typeParameter?.display:\r\n      colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | currency: colDef.typeParameter?.currencyCode:\r\n        colDef.typeParameter?.display:\r\n        colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Percent -->\r\n    <ng-container *ngSwitchCase=\"'percent'\">\r\n      <span [title]=\"_getTooltip(_value | percent: colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | percent: colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Date -->\r\n    <ng-container *ngSwitchCase=\"'date'\">\r\n      <span [title]=\"_getTooltip(_value | date: colDef.typeParameter?.format:\r\n      colDef.typeParameter?.timezone:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | date: colDef.typeParameter?.format:\r\n        colDef.typeParameter?.timezone:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Default -->\r\n    <ng-container *ngSwitchDefault>\r\n      <span [title]=\"_getTooltip(_value)\">{{_getText(_value)}}</span>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", styles: [".mtx-grid-img{display:block;width:32px;border-radius:4px;cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i4.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["color", "disabled", "disableRipple", "tabIndex", "role", "id", "aria-label", "aria-description", "value", "removable", "highlighted"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "component", type: i5.MatChipListbox, selector: "mat-chip-listbox", inputs: ["tabIndex", "multiple", "aria-orientation", "selectable", "compareWith", "required", "hideSingleSelectionIndicator", "value"], outputs: ["change"] }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.DecimalPipe, name: "number" }, { kind: "pipe", type: i3.PercentPipe, name: "percent" }, { kind: "pipe", type: i3.CurrencyPipe, name: "currency" }, { kind: "pipe", type: i3.DatePipe, name: "date" }, { kind: "pipe", type: i8.MtxToObservablePipe, name: "toObservable" }, { kind: "pipe", type: i9.MtxGridCellActionTooltipPipe, name: "cellActionTooltip" }, { kind: "pipe", type: i9.MtxGridCellActionDisablePipe, name: "cellActionDisable" }, { kind: "pipe", type: i9.MtxGridCellSummaryPipe, name: "cellSummary" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCell, decorators: [{
            type: Component,
            args: [{ selector: 'mtx-grid-cell', exportAs: 'mtxGridCell', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<span *ngIf=\"summary; else customCellFormattingTpl\"\r\n      [title]=\"_getFormatterTooltip((data | cellSummary: colDef))\"\r\n      [innerHTML]=\"_getText((data | cellSummary: colDef))\">\r\n</span>\r\n\r\n<!-- Custom formatting -->\r\n<ng-template #customCellFormattingTpl>\r\n  <span *ngIf=\"colDef.formatter; else defaultCellFormattingTpl\"\r\n        [title]=\"_getFormatterTooltip(colDef.formatter(rowData, colDef))\"\r\n        [innerHTML]=\"_getText(colDef.formatter(rowData, colDef))\">\r\n  </span>\r\n</ng-template>\r\n\r\n<!-- Default formatting -->\r\n<ng-template #defaultCellFormattingTpl>\r\n  <ng-container [ngSwitch]=\"colDef.type\">\r\n    <!-- Tag -->\r\n    <ng-container *ngSwitchCase=\"'tag'\">\r\n      <mat-chip-listbox *ngIf=\"colDef.tag && colDef.tag[_value]; else tagEmptyTpl\">\r\n        <mat-chip color=\"primary\" [ngClass]=\"['bg-' + colDef.tag[_value].color]\">\r\n          {{colDef.tag[_value].text}}\r\n        </mat-chip>\r\n      </mat-chip-listbox>\r\n      <ng-template #tagEmptyTpl>{{_value}}</ng-template>\r\n    </ng-container>\r\n    <!-- Buttons -->\r\n    <ng-container *ngSwitchCase=\"'button'\">\r\n      <ng-container *ngFor=\"let btn of colDef.buttons;\">\r\n        <ng-container *ngIf=\"!btn.iif || btn.iif(rowData)\">\r\n          <button *ngIf=\"btn.type==='basic'\" type=\"button\"\r\n                  [ngClass]=\"['mtx-grid-action-button', btn.class||'']\"\r\n                  mat-button [color]=\"btn.color || 'primary'\"\r\n                  [disabled]=\"(btn | cellActionDisable: rowData: rowChangeRecord: rowChangeRecord?.currentValue)\"\r\n                  [matTooltip]=\"(btn | cellActionTooltip).message | toObservable | async\"\r\n                  [matTooltipClass]=\"(btn | cellActionTooltip).class\"\r\n                  [matTooltipHideDelay]=\"(btn | cellActionTooltip).hideDelay\"\r\n                  [matTooltipShowDelay]=\"(btn | cellActionTooltip).showDelay\"\r\n                  [matTooltipPosition]=\"(btn | cellActionTooltip).position || 'below'\"\r\n                  [matTooltipTouchGestures]=\"(btn | cellActionTooltip).touchGestures || 'auto'\"\r\n                  (click)=\"_onActionClick($event, btn, rowData)\">\r\n            <mat-icon class=\"mtx-grid-icon\" *ngIf=\"btn.icon\">{{btn.icon}}</mat-icon>\r\n            <span>{{btn.text | toObservable | async}}</span>\r\n          </button>\r\n          <button *ngIf=\"!btn.type || btn.type==='icon'\" type=\"button\"\r\n                  [ngClass]=\"['mtx-grid-action-button', btn.class||'']\"\r\n                  mat-icon-button [color]=\"btn.color || 'primary'\"\r\n                  [disabled]=\"(btn | cellActionDisable: rowData: rowChangeRecord: rowChangeRecord?.currentValue)\"\r\n                  [matTooltip]=\"(btn | cellActionTooltip).message | toObservable | async\"\r\n                  [matTooltipClass]=\"(btn | cellActionTooltip).class\"\r\n                  [matTooltipHideDelay]=\"(btn | cellActionTooltip).hideDelay\"\r\n                  [matTooltipShowDelay]=\"(btn | cellActionTooltip).showDelay\"\r\n                  [matTooltipPosition]=\"(btn | cellActionTooltip).position || 'below'\"\r\n                  [matTooltipTouchGestures]=\"(btn | cellActionTooltip).touchGestures || 'auto'\"\r\n                  (click)=\"_onActionClick($event, btn, rowData)\">\r\n            <mat-icon class=\"mtx-grid-icon\">{{btn.icon}}</mat-icon>\r\n          </button>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <!-- Link -->\r\n    <ng-container *ngSwitchCase=\"'link'\">\r\n      <a [href]=\"_value\" target=\"_blank\">{{_value}}</a>\r\n    </ng-container>\r\n    <!-- Image -->\r\n    <ng-container *ngSwitchCase=\"'image'\">\r\n      <img class=\"mtx-grid-img\" [src]=\"_value\" (click)=\"_onImagePreview(_value)\">\r\n    </ng-container>\r\n    <!-- Boolean -->\r\n    <ng-container *ngSwitchCase=\"'boolean'\">\r\n      <span [title]=\"_getTooltip(_value)\">{{_getText(_value)}}</span>\r\n    </ng-container>\r\n    <!-- Number -->\r\n    <ng-container *ngSwitchCase=\"'number'\">\r\n      <span [title]=\"_getTooltip(_value | number: colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | number: colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Currency -->\r\n    <ng-container *ngSwitchCase=\"'currency'\">\r\n      <span [title]=\"_getTooltip(_value | currency: colDef.typeParameter?.currencyCode:\r\n      colDef.typeParameter?.display:\r\n      colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | currency: colDef.typeParameter?.currencyCode:\r\n        colDef.typeParameter?.display:\r\n        colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Percent -->\r\n    <ng-container *ngSwitchCase=\"'percent'\">\r\n      <span [title]=\"_getTooltip(_value | percent: colDef.typeParameter?.digitsInfo:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | percent: colDef.typeParameter?.digitsInfo:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Date -->\r\n    <ng-container *ngSwitchCase=\"'date'\">\r\n      <span [title]=\"_getTooltip(_value | date: colDef.typeParameter?.format:\r\n      colDef.typeParameter?.timezone:\r\n      colDef.typeParameter?.locale)\">\r\n        {{_getText(_value | date: colDef.typeParameter?.format:\r\n        colDef.typeParameter?.timezone:\r\n        colDef.typeParameter?.locale)}}\r\n      </span>\r\n    </ng-container>\r\n    <!-- Default -->\r\n    <ng-container *ngSwitchDefault>\r\n      <span [title]=\"_getTooltip(_value)\">{{_getText(_value)}}</span>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", styles: [".mtx-grid-img{display:block;width:32px;border-radius:4px;cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MtxDialog }, { type: i2.MtxGridUtils }, { type: i0.KeyValueDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { rowData: [{
                type: Input
            }], colDef: [{
                type: Input
            }], data: [{
                type: Input
            }], summary: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], rowDataChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,