import { Pipe } from '@angular/core';
import { isObservable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./grid-utils";
export class MtxGridColClassPipe {
    transform(colDef, rowData, rowChangeRecord, currentValue) {
        if (typeof colDef.class === 'string') {
            return colDef.class;
        }
        else if (typeof colDef.class === 'function') {
            return colDef.class(rowData, colDef);
        }
        return '';
    }
}
/** @nocollapse */ MtxGridColClassPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridColClassPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ MtxGridColClassPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.1", ngImport: i0, type: MtxGridColClassPipe, name: "colClass" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridColClassPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'colClass',
                }]
        }] });
export class MtxGridRowClassPipe {
    transform(rowData, index, dataIndex, rowClassFormatter) {
        const rowIndex = typeof index === 'undefined' ? dataIndex : index;
        const classList = rowIndex % 2 === 1 ? ['mat-row-odd'] : [];
        if (rowClassFormatter) {
            for (const key of Object.keys(rowClassFormatter)) {
                if (rowClassFormatter[key](rowData, rowIndex)) {
                    classList.push(key);
                }
            }
        }
        return classList.join(' ');
    }
}
/** @nocollapse */ MtxGridRowClassPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridRowClassPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ MtxGridRowClassPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.1", ngImport: i0, type: MtxGridRowClassPipe, name: "rowClass" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridRowClassPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'rowClass',
                }]
        }] });
export class MtxGridCellActionTooltipPipe {
    transform(btn) {
        if (typeof btn.tooltip === 'string' || isObservable(btn.tooltip)) {
            return {
                message: btn.tooltip,
            };
        }
        else {
            return btn.tooltip || { message: '' };
        }
    }
}
/** @nocollapse */ MtxGridCellActionTooltipPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionTooltipPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ MtxGridCellActionTooltipPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionTooltipPipe, name: "cellActionTooltip" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionTooltipPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'cellActionTooltip',
                }]
        }] });
export class MtxGridCellActionDisablePipe {
    transform(btn, rowData, rowChangeRecord, currentValue) {
        if (typeof btn.disabled === 'boolean') {
            return btn.disabled;
        }
        else if (typeof btn.disabled === 'function') {
            return btn.disabled(rowData);
        }
        else {
            return false;
        }
    }
}
/** @nocollapse */ MtxGridCellActionDisablePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionDisablePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ MtxGridCellActionDisablePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionDisablePipe, name: "cellActionDisable" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellActionDisablePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'cellActionDisable',
                }]
        }] });
export class MtxGridCellSummaryPipe {
    constructor(utils) {
        this.utils = utils;
    }
    transform(data, colDef) {
        if (typeof colDef.summary === 'string') {
            return colDef.summary;
        }
        else if (typeof colDef.summary === 'function') {
            return colDef.summary(this.utils.getColData(data, colDef), colDef);
        }
    }
}
/** @nocollapse */ MtxGridCellSummaryPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellSummaryPipe, deps: [{ token: i1.MtxGridUtils }], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ MtxGridCellSummaryPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellSummaryPipe, name: "cellSummary" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: MtxGridCellSummaryPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'cellSummary',
                }]
        }], ctorParameters: function () { return [{ type: i1.MtxGridUtils }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1waXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2V4dGVuc2lvbnMvZ3JpZC9ncmlkLXBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFPcEMsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixTQUFTLENBQ1AsTUFBcUIsRUFDckIsT0FBNkIsRUFDN0IsZUFBbUQsRUFDbkQsWUFBa0I7UUFFbEIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ3BDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNyQjthQUFNLElBQUksT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTtZQUM3QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzttSUFiVSxtQkFBbUI7aUlBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUgvQixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxVQUFVO2lCQUNqQjs7QUFvQkQsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixTQUFTLENBQ1AsT0FBNEIsRUFDNUIsS0FBYSxFQUNiLFNBQWlCLEVBQ2pCLGlCQUE0QztRQUU1QyxNQUFNLFFBQVEsR0FBRyxPQUFPLEtBQUssS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xFLE1BQU0sU0FBUyxHQUFhLFFBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEUsSUFBSSxpQkFBaUIsRUFBRTtZQUNyQixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUU7b0JBQzdDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JCO2FBQ0Y7U0FDRjtRQUNELE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDOzttSUFqQlUsbUJBQW1CO2lJQUFuQixtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkFIL0IsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakI7O0FBd0JELE1BQU0sT0FBTyw0QkFBNEI7SUFDdkMsU0FBUyxDQUFDLEdBQXdCO1FBQ2hDLElBQUksT0FBTyxHQUFHLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2hFLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO2FBQ3JCLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7NElBVFUsNEJBQTRCOzBJQUE1Qiw0QkFBNEI7MkZBQTVCLDRCQUE0QjtrQkFIeEMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsbUJBQW1CO2lCQUMxQjs7QUFnQkQsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxTQUFTLENBQ1AsR0FBd0IsRUFDeEIsT0FBNEIsRUFDNUIsZUFBbUQsRUFDbkQsWUFBa0I7UUFFbEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ3JDLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQztTQUNyQjthQUFNLElBQUksT0FBTyxHQUFHLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUM3QyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs0SUFkVSw0QkFBNEI7MElBQTVCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUh4QyxJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxtQkFBbUI7aUJBQzFCOztBQXFCRCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQW9CLEtBQW1CO1FBQW5CLFVBQUssR0FBTCxLQUFLLENBQWM7SUFBRyxDQUFDO0lBQzNDLFNBQVMsQ0FBQyxJQUFXLEVBQUUsTUFBcUI7UUFDMUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQ3RDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUN2QjthQUFNLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRTtZQUMvQyxPQUFRLE1BQU0sQ0FBQyxPQUF3RCxDQUNyRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQ25DLE1BQU0sQ0FDUCxDQUFDO1NBQ0g7SUFDSCxDQUFDOztzSUFYVSxzQkFBc0I7b0lBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQUhsQyxJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxhQUFhO2lCQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleVZhbHVlQ2hhbmdlUmVjb3JkLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc09ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE10eEdyaWRVdGlscyB9IGZyb20gJy4vZ3JpZC11dGlscyc7XG5pbXBvcnQgeyBNdHhHcmlkQ29sdW1uLCBNdHhHcmlkQ29sdW1uQnV0dG9uLCBNdHhHcmlkUm93Q2xhc3NGb3JtYXR0ZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdjb2xDbGFzcycsXG59KVxuZXhwb3J0IGNsYXNzIE10eEdyaWRDb2xDbGFzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKFxuICAgIGNvbERlZjogTXR4R3JpZENvbHVtbixcbiAgICByb3dEYXRhPzogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICByb3dDaGFuZ2VSZWNvcmQ/OiBLZXlWYWx1ZUNoYW5nZVJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgY3VycmVudFZhbHVlPzogYW55XG4gICk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBjb2xEZWYuY2xhc3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gY29sRGVmLmNsYXNzO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbERlZi5jbGFzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNvbERlZi5jbGFzcyhyb3dEYXRhLCBjb2xEZWYpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuQFBpcGUoe1xuICBuYW1lOiAncm93Q2xhc3MnLFxufSlcbmV4cG9ydCBjbGFzcyBNdHhHcmlkUm93Q2xhc3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShcbiAgICByb3dEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgZGF0YUluZGV4OiBudW1iZXIsXG4gICAgcm93Q2xhc3NGb3JtYXR0ZXI/OiBNdHhHcmlkUm93Q2xhc3NGb3JtYXR0ZXJcbiAgKTogc3RyaW5nIHtcbiAgICBjb25zdCByb3dJbmRleCA9IHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBkYXRhSW5kZXggOiBpbmRleDtcbiAgICBjb25zdCBjbGFzc0xpc3Q6IHN0cmluZ1tdID0gcm93SW5kZXggJSAyID09PSAxID8gWydtYXQtcm93LW9kZCddIDogW107XG4gICAgaWYgKHJvd0NsYXNzRm9ybWF0dGVyKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhyb3dDbGFzc0Zvcm1hdHRlcikpIHtcbiAgICAgICAgaWYgKHJvd0NsYXNzRm9ybWF0dGVyW2tleV0ocm93RGF0YSwgcm93SW5kZXgpKSB7XG4gICAgICAgICAgY2xhc3NMaXN0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xhc3NMaXN0LmpvaW4oJyAnKTtcbiAgfVxufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdjZWxsQWN0aW9uVG9vbHRpcCcsXG59KVxuZXhwb3J0IGNsYXNzIE10eEdyaWRDZWxsQWN0aW9uVG9vbHRpcFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGJ0bjogTXR4R3JpZENvbHVtbkJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YgYnRuLnRvb2x0aXAgPT09ICdzdHJpbmcnIHx8IGlzT2JzZXJ2YWJsZShidG4udG9vbHRpcCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGJ0bi50b29sdGlwLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ0bi50b29sdGlwIHx8IHsgbWVzc2FnZTogJycgfTtcbiAgICB9XG4gIH1cbn1cblxuQFBpcGUoe1xuICBuYW1lOiAnY2VsbEFjdGlvbkRpc2FibGUnLFxufSlcbmV4cG9ydCBjbGFzcyBNdHhHcmlkQ2VsbEFjdGlvbkRpc2FibGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShcbiAgICBidG46IE10eEdyaWRDb2x1bW5CdXR0b24sXG4gICAgcm93RGF0YTogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICByb3dDaGFuZ2VSZWNvcmQ/OiBLZXlWYWx1ZUNoYW5nZVJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgY3VycmVudFZhbHVlPzogYW55XG4gICkge1xuICAgIGlmICh0eXBlb2YgYnRuLmRpc2FibGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBidG4uZGlzYWJsZWQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnRuLmRpc2FibGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gYnRuLmRpc2FibGVkKHJvd0RhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2NlbGxTdW1tYXJ5Jyxcbn0pXG5leHBvcnQgY2xhc3MgTXR4R3JpZENlbGxTdW1tYXJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHV0aWxzOiBNdHhHcmlkVXRpbHMpIHt9XG4gIHRyYW5zZm9ybShkYXRhOiBhbnlbXSwgY29sRGVmOiBNdHhHcmlkQ29sdW1uKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xEZWYuc3VtbWFyeSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBjb2xEZWYuc3VtbWFyeTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xEZWYuc3VtbWFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIChjb2xEZWYuc3VtbWFyeSBhcyAoZGF0YTogYW55W10sIGNvbERlZj86IE10eEdyaWRDb2x1bW4pID0+IGFueSkoXG4gICAgICAgIHRoaXMudXRpbHMuZ2V0Q29sRGF0YShkYXRhLCBjb2xEZWYpLFxuICAgICAgICBjb2xEZWZcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=