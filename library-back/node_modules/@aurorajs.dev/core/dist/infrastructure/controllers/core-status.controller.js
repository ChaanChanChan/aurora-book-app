"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreStatusController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const node_process_1 = require("node:process");
let CoreStatusController = class CoreStatusController {
    async main() {
        const mu = (0, node_process_1.memoryUsage)();
        return {
            totalMemory: this.setFormat(mu['rss']) + ' Gb',
            totalNodeMemory: this.setFormat(mu['heapTotal']) + ' Gb',
            nodeMemoryUsed: this.setFormat(mu['heapUsed']) + ' Gb',
            externalMemoryUsed: this.setFormat(mu['external']) + ' Gb',
            BuffersMemoryUsed: this.setFormat(mu['arrayBuffers']) + ' Gb',
        };
    }
    setFormat(value) {
        return Math.round((value / 1024 / 1024 / 1024) * 100) / 100;
    }
};
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get node status' }),
    (0, swagger_1.ApiCreatedResponse)({ description: 'The record has been successfully created.' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CoreStatusController.prototype, "main", null);
CoreStatusController = __decorate([
    (0, swagger_1.ApiTags)('[core] status'),
    (0, common_1.Controller)('core/status')
], CoreStatusController);
exports.CoreStatusController = CoreStatusController;
