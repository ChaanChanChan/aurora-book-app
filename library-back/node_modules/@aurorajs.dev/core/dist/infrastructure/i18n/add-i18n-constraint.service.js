"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddI18NConstraintService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const aurora_types_1 = require("../../domain/aurora.types");
const _ = require("lodash");
let AddI18NConstraintService = class AddI18NConstraintService {
    cacheManager;
    configService;
    constructor(cacheManager, configService) {
        this.cacheManager = cacheManager;
        this.configService = configService;
    }
    async main(constraint, i18NRelation, contentLanguage, { contentLanguageFormat = aurora_types_1.FormatLangCode.ISO6392, defineDefaultLanguage = true } = {}) {
        if (contentLanguage === '*')
            return _.merge({}, {
                include: [{
                        association: i18NRelation,
                        required: true,
                    }]
            }, constraint);
        const langs = await this.cacheManager.get('common/lang') || [];
        let lang = langs.find(lang => lang[contentLanguageFormat] === contentLanguage);
        if (!lang && defineDefaultLanguage)
            lang = langs.find(lang => lang[aurora_types_1.FormatLangCode.ISO6392] === this.configService.get('APP_LANG'));
        if (!lang && defineDefaultLanguage)
            throw new common_1.InternalServerErrorException('APP_LANG must be defined in iso6392 lang code format in .env file, not found contentLanguage: ', contentLanguage);
        return _.merge({}, {
            include: [{
                    association: i18NRelation,
                    required: true,
                    where: lang ? { langId: lang.id } : undefined
                }]
        }, constraint);
    }
};
AddI18NConstraintService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(common_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [Object, config_1.ConfigService])
], AddI18NConstraintService);
exports.AddI18NConstraintService = AddI18NConstraintService;
