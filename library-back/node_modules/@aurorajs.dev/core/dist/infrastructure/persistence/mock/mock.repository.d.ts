import { LiteralObject } from '@nestjs/common';
import { UuidValueObject } from '../../../domain/value-objects/uuid.value-object';
import { Pagination } from '../../../domain/shared/pagination';
import { QueryStatement } from '../../../domain/persistence/sql-statement/sql-statement';
import { IRepository } from '../../../domain/persistence/repository';
import { AggregateBase } from '../../../domain/shared/aggregate-base';
import { TimestampValueObject } from '../../../domain/value-objects/timestamp.value-object';
import { CQMetadata } from '../../../domain/aurora.types';
export declare abstract class MockRepository<Aggregate extends AggregateBase> implements IRepository<Aggregate> {
    readonly repository: any;
    readonly aggregateName: string;
    collectionSource: Aggregate[];
    deletedAtInstance: TimestampValueObject;
    get collectionResponse(): any[];
    paginate({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Pagination<Aggregate>>;
    find({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate>;
    findById(id: UuidValueObject, { constraint, cQMetadata, }?: {
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate>;
    get({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    rawSQL({ rawSQL, cQMetadata, }?: {
        rawSQL?: string;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    count({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<number>;
    create(aggregate: Aggregate, { createOptions, dataFactory, finderQueryStatement, }?: {
        createOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        finderQueryStatement?: (aggregate: Aggregate) => QueryStatement;
    }): Promise<void>;
    insert(aggregates: Aggregate[], { insertOptions, dataFactory, }?: {
        insertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    updateById(aggregate: Aggregate, { updateOptions, constraint, cQMetadata, dataFactory, findArguments, }?: {
        updateOptions?: LiteralObject;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        findArguments?: LiteralObject;
    }): Promise<void>;
    update(aggregate: Aggregate, { updateOptions, queryStatement, constraint, cQMetadata, dataFactory, }?: {
        updateOptions?: LiteralObject;
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        findArguments?: LiteralObject;
    }): Promise<void>;
    upsert(aggregate: Aggregate, { upsertOptions, dataFactory, }?: {
        upsertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    deleteById(id: UuidValueObject, { constraint, cQMetadata, deleteOptions, }?: {
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        deleteOptions?: LiteralObject;
    }): Promise<void>;
    delete({ queryStatement, constraint, cQMetadata, deleteOptions, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        deleteOptions?: LiteralObject;
    }): Promise<void>;
}
