"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRepository = void 0;
const common_1 = require("@nestjs/common");
const cleanDeep = require('clean-deep');
let MockRepository = class MockRepository {
    repository;
    aggregateName;
    collectionSource;
    deletedAtInstance;
    get collectionResponse() {
        return this.collectionSource.map(item => cleanDeep(item.toDTO(), {
            nullValues: false,
            emptyStrings: false,
            emptyObjects: false,
            emptyArrays: false,
        }));
    }
    async paginate({ queryStatement = {}, constraint = {}, cQMetadata = undefined, } = {}) {
        const offset = queryStatement.offset ? queryStatement.offset : 0;
        const limit = queryStatement.limit ? queryStatement.limit : this.collectionSource.length;
        return {
            total: this.collectionSource.length,
            count: this.collectionSource.length,
            rows: this.collectionSource.slice(offset, limit),
        };
    }
    async find({ queryStatement = {}, constraint = {}, cQMetadata = undefined, } = {}) {
        const aggregate = this.collectionSource.find(item => item.id.value === queryStatement.where.id);
        if (!aggregate)
            throw new common_1.NotFoundException(`${this.aggregateName} not found`);
        return aggregate;
    }
    async findById(id, { constraint = {}, cQMetadata = undefined, } = {}) {
        const aggregate = this.collectionSource.find(author => author.id.value === id.value);
        if (!aggregate)
            throw new common_1.NotFoundException(`${this.aggregateName} not found`);
        return aggregate;
    }
    async get({ queryStatement = {}, constraint = {}, cQMetadata = undefined, } = {}) {
        return this.collectionSource;
    }
    async rawSQL({ rawSQL = undefined, cQMetadata = undefined, } = {}) {
        return this.collectionSource;
    }
    async count({ queryStatement = {}, constraint = {}, cQMetadata = undefined, } = {}) {
        return this.collectionSource.length;
    }
    async create(aggregate, { createOptions = undefined, dataFactory = (aggregate) => aggregate.toDTO(), finderQueryStatement = (aggregate) => ({ where: { id: aggregate['id']['value'] } }), } = {}) {
        if (this.collectionSource.find(item => item.id.value === aggregate.id.value))
            throw new common_1.ConflictException(`Error to create ${this.aggregateName}, the id ${aggregate.id.value} already exist in database`);
        aggregate.deletedAt = this.deletedAtInstance;
        this.collectionSource.push(aggregate);
    }
    async insert(aggregates, { insertOptions = undefined, dataFactory = (aggregate) => aggregate.toDTO(), } = {}) {
    }
    async updateById(aggregate, { updateOptions = undefined, constraint = {}, cQMetadata = undefined, dataFactory = (aggregate) => aggregate.toDTO(), findArguments = { id: aggregate['id']['value'] }, } = {}) {
        await this.findById(aggregate.id);
        this.collectionSource.map(item => {
            if (item.id.value === aggregate.id.value)
                return aggregate;
            return item;
        });
    }
    async update(aggregate, { updateOptions = undefined, queryStatement = {}, constraint = {}, cQMetadata = undefined, dataFactory = (aggregate) => aggregate.toDTO(), } = {}) {
        if (!queryStatement || !queryStatement.where || updateOptions?.allRows)
            throw new common_1.BadRequestException('To update multiple records, you must define a where statement');
    }
    async upsert(aggregate, { upsertOptions = undefined, dataFactory = (aggregate) => aggregate.toDTO(), } = {}) {
    }
    async deleteById(id, { constraint = {}, cQMetadata = undefined, deleteOptions = undefined, } = {}) {
        await this.findById(id);
        this.collectionSource.filter(aggregate => aggregate.id.value !== id.value);
    }
    async delete({ queryStatement = {}, constraint = {}, cQMetadata = undefined, deleteOptions = undefined, } = {}) {
        if (!Array.isArray(queryStatement) || queryStatement.length === 0 || deleteOptions?.allRows)
            throw new common_1.BadRequestException('To delete multiple records, you must define a query statement');
    }
};
MockRepository = __decorate([
    (0, common_1.Injectable)()
], MockRepository);
exports.MockRepository = MockRepository;
