"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequelizeCriteria = void 0;
const sequelize_1 = require("sequelize");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const dayjs = require("dayjs");
dayjs.extend(utc);
dayjs.extend(timezone);
const utils_1 = require("../../../domain/shared/utils");
const operator_1 = require("../../../domain/persistence/sql-statement/operator");
const lodash_1 = require("lodash");
class SequelizeCriteria {
    implements(queryStatement, cQMetadata) {
        if (cQMetadata?.timezone) {
            queryStatement = utils_1.Utils.deepMapValues(queryStatement, (value, key) => {
                if (typeof value === 'string') {
                    const isDate = value.match(/[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) (2[0-3]|[01][0-9]):[0-5][0-9]:[0-5][0-9]/);
                    return isDate ? dayjs.tz(value, cQMetadata.timezone).tz(process.env.TZ).format('YYYY-MM-DD HH:mm:ss') : value;
                }
                return value;
            });
        }
        const availableOperators = [];
        for (const operator in operator_1.Operator) {
            if (!isNaN(Number(operator)))
                break;
            availableOperators.push(operator);
        }
        return utils_1.Utils.deepMapKeysOperators(queryStatement, key => key.startsWith('[') &&
            key.endsWith(']') &&
            availableOperators.includes(key.slice(1, -1))
            ? sequelize_1.Op[key.slice(1, -1)]
            : key);
    }
    mergeQueryConstraintStatement(queryStatement, constraint) {
        const finalQueryStatement = (0, lodash_1.merge)({}, queryStatement, constraint);
        if (!(0, lodash_1.isEmpty)(queryStatement.where) && !(0, lodash_1.isEmpty)(constraint.where)) {
            finalQueryStatement.where = {
                [operator_1.Operator.and]: [queryStatement.where, constraint.where],
            };
        }
        return finalQueryStatement;
    }
}
exports.SequelizeCriteria = SequelizeCriteria;
