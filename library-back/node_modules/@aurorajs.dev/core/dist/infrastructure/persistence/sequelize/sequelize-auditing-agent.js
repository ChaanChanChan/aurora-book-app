"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequelizeAuditingAgent = void 0;
const common_1 = require("@nestjs/common");
const domain_1 = require("../../../domain");
const _ = require("lodash");
class SequelizeAuditingAgent {
    static registerSideEffect(instance, options, event, modelPath, modelName) {
        const auditingMeta = options.auditing;
        if (!auditingMeta) {
            common_1.Logger.log(`Event ${event} of ${modelName} model, is not audited`);
            return;
        }
        let dataValues;
        let previousDataValues;
        if (event === domain_1.AuditingSideEffectEvent.UPSERTED &&
            Array.isArray(instance) &&
            instance.length > 0)
            instance = instance[0];
        if (event === domain_1.AuditingSideEffectEvent.CREATED ||
            event === domain_1.AuditingSideEffectEvent.UPDATED ||
            event === domain_1.AuditingSideEffectEvent.DELETED ||
            event === domain_1.AuditingSideEffectEvent.RESTORED ||
            event === domain_1.AuditingSideEffectEvent.UPSERTED) {
            if (!('dataValues' in instance) ||
                !('_previousDataValues' in instance))
                throw new common_1.BadRequestException(`The instance for hook with event ${event} ane model ${modelName} does not defined.`);
            dataValues = _.omit(instance.dataValues, ['createdAt', 'updatedAt', 'deletedAt']);
            previousDataValues = _.omit(instance._previousDataValues, ['createdAt', 'updatedAt', 'deletedAt']);
        }
        if (event === domain_1.AuditingSideEffectEvent.BULK_CREATED) {
            if (Array.isArray(instance) &&
                instance.length > 0 &&
                !('dataValues' in instance[0]) ||
                !('_previousDataValues' in instance[0]))
                throw new common_1.BadRequestException(`The instance for hook with event ${event} ane model ${modelName} does not defined.`);
            dataValues = instance.map(item => _.omit(item.dataValues, ['createdAt', 'updatedAt', 'deletedAt']));
            previousDataValues = instance.map(item => _.omit(instance._previousDataValues, ['createdAt', 'updatedAt', 'deletedAt']));
        }
        const now = domain_1.Utils.nowTimestamp();
        let oldValue = {};
        let newValue = {};
        let auditableId;
        switch (event) {
            case domain_1.AuditingSideEffectEvent.CREATED:
                newValue = dataValues;
                auditableId = dataValues.id;
                break;
            case domain_1.AuditingSideEffectEvent.BULK_CREATED:
                newValue = dataValues;
                break;
            case domain_1.AuditingSideEffectEvent.UPDATED:
                newValue = domain_1.Utils.diff(SequelizeAuditingAgent.parseObject(dataValues), SequelizeAuditingAgent.parseObject(previousDataValues));
                oldValue = domain_1.Utils.diff(SequelizeAuditingAgent.parseObject(previousDataValues), SequelizeAuditingAgent.parseObject(dataValues));
                auditableId = dataValues.id;
                break;
            case domain_1.AuditingSideEffectEvent.DELETED:
                oldValue = dataValues;
                auditableId = dataValues.id;
                break;
        }
        auditingMeta.auditingRunner.create(auditingMeta, now, event, modelPath, modelName, auditableId, oldValue, newValue);
    }
    static parseObject(object) {
        return JSON.parse(JSON.stringify(object));
    }
}
exports.SequelizeAuditingAgent = SequelizeAuditingAgent;
