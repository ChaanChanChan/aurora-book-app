import { LiteralObject } from '@nestjs/common';
import { Model } from 'sequelize-typescript';
import { QueryStatement } from '../../../domain/persistence/sql-statement/sql-statement';
import { CQMetadata, HookResponse } from '../../../domain/aurora.types';
import { AuditingRunner, ICriteria, IRepository } from '../../../domain';
import { IMapper } from '../../../domain/shared/mapper';
import { UuidValueObject } from '../../../domain/value-objects/uuid.value-object';
import { AggregateBase } from '../../../domain/shared/aggregate-base';
import { Pagination } from '../../../domain/shared/pagination';
export declare abstract class SequelizeRepository<Aggregate extends AggregateBase, ModelClass> implements IRepository<Aggregate> {
    readonly repository: any;
    readonly criteria: ICriteria;
    readonly aggregateName: string;
    readonly mapper: IMapper;
    readonly auditingRunner: AuditingRunner;
    paginate({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Pagination<Aggregate>>;
    countStatementPaginateHook(queryStatement?: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    composeStatementPaginateHook(queryStatement?: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    find({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate>;
    composeStatementFindHook(queryStatement?: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    findById(id: UuidValueObject, { constraint, cQMetadata, }?: {
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate>;
    composeStatementFindByIdHook(queryStatement: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    get({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    composeStatementGetHook(queryStatement?: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    rawSQL({ rawSQL, cQMetadata, }?: {
        rawSQL?: string;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    composeStatementRawSQLHook(rawSQL: string, cQMetadata?: CQMetadata): string;
    count({ queryStatement, constraint, cQMetadata, }?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<number>;
    composeStatementCountHook(queryStatement?: QueryStatement, cQMetadata?: CQMetadata): HookResponse;
    create(aggregate: Aggregate, { createOptions, dataFactory, finderQueryStatement, }?: {
        createOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        finderQueryStatement?: (aggregate: Aggregate) => QueryStatement;
    }): Promise<void>;
    createdAggregateHook(aggregate: Aggregate, model: Model<ModelClass>, createOptions: LiteralObject): Promise<void>;
    insert(aggregates: Aggregate[], { insertOptions, dataFactory, }?: {
        insertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    insertedAggregateHook(aggregates: Aggregate[], insertOptions: LiteralObject): Promise<void>;
    updateById(aggregate: Aggregate, { updateByIdOptions, constraint, cQMetadata, dataFactory, findArguments, }?: {
        updateByIdOptions?: LiteralObject;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        findArguments?: LiteralObject;
    }): Promise<void>;
    updatedByIdAggregateHook(aggregate: Aggregate, model: Model<ModelClass>, updateByIdOptions: LiteralObject): Promise<void>;
    update(aggregate: Aggregate, { updateOptions, queryStatement, constraint, cQMetadata, dataFactory, }?: {
        updateOptions?: LiteralObject;
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    updatedAggregateHook(aggregate: Aggregate, model: Model<ModelClass>, updateOptions: LiteralObject): Promise<void>;
    upsert(aggregate: Aggregate, { upsertOptions, dataFactory, }?: {
        upsertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    upsertedAggregateHook(aggregates: Aggregate, upsertOptions: LiteralObject): Promise<void>;
    deleteById(id: UuidValueObject, { deleteOptions, constraint, cQMetadata, }?: {
        deleteOptions?: LiteralObject;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<void>;
    delete({ deleteOptions, queryStatement, constraint, cQMetadata, }?: {
        deleteOptions?: LiteralObject;
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<void>;
}
