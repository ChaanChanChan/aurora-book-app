"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequelizeConfigModule = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const sequelize_1 = require("@nestjs/sequelize");
let SequelizeConfigModule = class SequelizeConfigModule {
};
SequelizeConfigModule = __decorate([
    (0, common_1.Module)({
        imports: [
            sequelize_1.SequelizeModule.forRootAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: (configService) => {
                    process.env.TZ = configService.get('APP_TIMEZONE');
                    return {
                        dialect: configService.get('DATABASE_DIALECT'),
                        storage: configService.get('DATABASE_STORAGE'),
                        host: configService.get('DATABASE_HOST'),
                        port: +configService.get('DATABASE_PORT'),
                        username: configService.get('DATABASE_USER'),
                        password: configService.get('DATABASE_PASSWORD'),
                        database: configService.get('DATABASE_SCHEMA'),
                        synchronize: configService.get('DATABASE_SYNCHRONIZE') === 'true' ? true : false,
                        logging: configService.get('DATABASE_LOGGIN') === 'true' ? console.log : false,
                        autoLoadModels: true,
                        models: [],
                    };
                },
            }),
        ],
        exports: [
            sequelize_1.SequelizeModule,
        ],
    })
], SequelizeConfigModule);
exports.SequelizeConfigModule = SequelizeConfigModule;
