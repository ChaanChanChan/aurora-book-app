"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageManager = void 0;
const path = require("path");
const sharp = require("sharp");
const exifReader = require("exif-reader");
class ImageManager {
    static async dimensions(path) {
        const metadata = await sharp(path).metadata();
        return {
            width: metadata.width,
            height: metadata.height
        };
    }
    static async exif(prop) {
        const buffer = prop instanceof Buffer ? prop : (await sharp(prop).metadata()).exif;
        try {
            return exifReader(buffer);
        }
        catch (error) {
            return null;
        }
    }
    static isImageMime(mime) {
        switch (mime) {
            case 'image/gif':
            case 'image/jpeg':
            case 'image/pjpeg':
            case 'image/png':
            case 'image/svg+xml':
                return true;
                break;
            default:
                return false;
        }
    }
    static async loadImage(path) {
        return await sharp(path);
    }
    static changeFormat(image, format, options) {
        switch (format) {
            case 'jpeg':
            case 'jpg':
                return image.jpeg(options);
            case 'png':
                return image.png(options);
            default:
                return image;
        }
    }
    static crop(image, region) {
        return image.extract(region);
    }
    static resize(image, width, height, options) {
        return image.resize(width, height, options);
    }
    static cropAttachment(attachment, attachmentFamily, crop) {
        const image = sharp(path.join(attachment.library.pathname, attachment.library.filename));
        if (attachmentFamily.format.toLowerCase() !== attachment.extension) {
            image.jpeg({
                quality: attachmentFamily.quality
            });
        }
        image.extract({
            left: crop.x,
            top: crop.y,
            width: crop.width,
            height: crop.height
        });
        if (attachmentFamily.width === null || attachmentFamily.height === null) {
        }
        else {
        }
        image.toFile('output.webp', (err, info) => { });
        return {
            attachment: '',
            attachmentFamily: '',
            crop: 'crop'
        };
    }
}
exports.ImageManager = ImageManager;
