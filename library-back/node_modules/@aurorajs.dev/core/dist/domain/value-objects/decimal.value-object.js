"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecimalValueObject = void 0;
const common_1 = require("@nestjs/common");
const number_value_object_1 = require("./number.value-object");
class DecimalValueObject extends number_value_object_1.NumberValueObject {
    set value(value) {
        if (!(this.validationRules.undefinable && value === undefined)) {
            const decimalCounter = this.decimalCount(value);
            const integersLimit = this.validationRules.decimals[0] - this.validationRules.decimals[1];
            const decimalsLimit = this.validationRules.decimals[1];
            if (decimalCounter.integers > integersLimit)
                throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is too large, has a maximum length of ${integersLimit} integers in ${value} number`);
            if (decimalCounter.decimals > decimalsLimit)
                throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is too large, has a maximum length of ${decimalsLimit} decimals in ${value} number`);
        }
        super.value = value;
    }
    get value() {
        return typeof super.value === 'number' ? super.value : Number.isNaN(Number.parseFloat(super.value)) ? super.value : Number.parseFloat(super.value);
    }
    toString() {
        return this.value.toString();
    }
    decimalCount(value) {
        const n = String(Math.abs(value));
        if (n.includes('.')) {
            return {
                integers: n.split('.')[0].length,
                decimals: n.split('.')[1].length,
            };
        }
        return {
            integers: n.length,
            decimals: 0,
        };
    }
}
exports.DecimalValueObject = DecimalValueObject;
