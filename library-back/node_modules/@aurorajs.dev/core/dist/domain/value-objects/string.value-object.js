"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringValueObject = void 0;
const common_1 = require("@nestjs/common");
const value_object_1 = require("./value-object");
class StringValueObject extends value_object_1.ValueObject {
    set value(value) {
        this.validateStringRules(value);
        super.value = value;
    }
    get value() {
        if (this._value === '')
            return null;
        return super.value;
    }
    validateStringRules(value) {
        if (this.validationRules.nullable === false && value === '')
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} must be defined, can not be null`);
        if (value !== null && value !== undefined) {
            if (!!this.validationRules?.minLength && value?.length < this.validationRules.minLength)
                throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is too short, has a minimum length of ${this.validationRules.minLength}`);
            if (!!this.validationRules?.maxLength && value?.length > this.validationRules.maxLength)
                throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is too large, has a maximum length of ${this.validationRules.maxLength}`);
            if (!!this.validationRules?.length && value?.length !== this.validationRules.length)
                throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is not allowed, must be a length of ${this.validationRules.length}`);
        }
    }
    toString() {
        return this.value;
    }
}
exports.StringValueObject = StringValueObject;
