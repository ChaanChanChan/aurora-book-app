"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimestampValueObject = void 0;
const common_1 = require("@nestjs/common");
const string_value_object_1 = require("./string.value-object");
const utils_1 = require("../shared/utils");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const dayjs = require("dayjs");
dayjs.extend(utc);
dayjs.extend(timezone);
class TimestampValueObject extends string_value_object_1.StringValueObject {
    set value(value) {
        if ((value === undefined || value === null) && this.data.currentTimestamp)
            value = utils_1.Utils.nowTimestamp();
        super.value = value;
        if (value === null || value === undefined)
            return;
        if (value !== null && value !== undefined && !((new Date(value)).getTime() > 0))
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} has to be a timestamp value, value ${value} is a not valid timestamp, format YYYY-MM-DD HH:mm:ss expected`);
        if (this.data.addTimezone) {
            super.value = dayjs.tz(value, process.env.TZ).tz(this.data.addTimezone).format('YYYY-MM-DD HH:mm:ss');
        }
        else if (this.data.removeTimezone) {
            super.value = dayjs.tz(value, this.data.removeTimezone).tz(process.env.TZ).format('YYYY-MM-DD HH:mm:ss');
        }
        else {
            super.value = dayjs(value, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD HH:mm:ss');
        }
    }
    get value() {
        return super.value;
    }
}
exports.TimestampValueObject = TimestampValueObject;
