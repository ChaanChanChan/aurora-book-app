"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueObject = void 0;
const common_1 = require("@nestjs/common");
class ValueObject {
    type;
    validationRules = {};
    data = {};
    _value;
    set value(value) {
        if (this.validationRules.nullable === false && value === null && !this.validationRules.default) {
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} must be defined, can not be null`);
        }
        if (this.validationRules.undefinable === false && value === undefined && !this.validationRules.default) {
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} must be defined, can not be undefined`);
        }
        if (((this.validationRules.nullable === false && value === null) ||
            (this.validationRules.undefinable === false && value === undefined))
            && this.validationRules.default)
            this._value = this.validationRules.default;
        else {
            this._value = value;
        }
    }
    get value() {
        return this._value;
    }
    constructor(dataValue, validationRules = {}, data = {}) {
        let value = undefined;
        if (dataValue &&
            typeof dataValue === 'object' &&
            ('haveToEncrypt' in dataValue ||
                'currentTimestamp' in dataValue ||
                'timezone' in dataValue)) {
            data = dataValue;
        }
        else {
            value = dataValue;
        }
        this.data = Object.assign({}, this.data, data);
        this.validationRules = validationRules;
        this.value = value;
    }
}
exports.ValueObject = ValueObject;
