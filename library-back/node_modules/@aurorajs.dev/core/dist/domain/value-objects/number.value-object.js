"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberValueObject = void 0;
const value_object_1 = require("./value-object");
const common_1 = require("@nestjs/common");
class NumberValueObject extends value_object_1.ValueObject {
    set value(value) {
        if (value !== undefined &&
            value !== null &&
            isNaN(value))
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} has to be a number value`);
        if (value === '')
            value = null;
        if (value?.toString().length > this.validationRules.maxLength) {
            throw new common_1.BadRequestException(`Value for ${this.validationRules.name} is too large, has a maximum length of ${this.validationRules.maxLength}`);
        }
        if (this.validationRules.unsigned && Math.sign(value) === -1) {
            throw new common_1.BadRequestException(`The numerical value for ${this.validationRules.name} must have a positive sign, this field does not accept negative values, the received value is ${value}`);
        }
        super.value = value;
    }
    get value() {
        return super.value;
    }
    toString() {
        return this.value.toString();
    }
}
exports.NumberValueObject = NumberValueObject;
