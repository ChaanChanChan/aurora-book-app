import { LiteralObject } from '@nestjs/common';
import { QueryStatement } from './persistence/sql-statement/sql-statement';
import { AuditingRunner } from './persistence/auditing-runner';
export interface AuditingAccount {
    id: string;
    email: string;
}
export interface AuditingMeta<T extends AuditingAccount = AuditingAccount> {
    ip: string;
    auditingRunner?: AuditingRunner;
    userAgent: string;
    method: string;
    baseUrl: string;
    params: {
        [key: string]: any;
    };
    query: {
        [key: string]: any;
    };
    body: {
        [key: string]: any;
    };
    account: T;
    operationId?: string;
    operationSort?: number;
    tags?: string[] | ((oldValue: any, newValue: any, auditingMeta: AuditingMeta) => string[]);
    id?: string;
}
export declare enum AuditingSideEffectEvent {
    CREATED = "CREATED",
    BULK_CREATED = "BULK_CREATED",
    UPDATED = "UPDATED",
    BULK_UPDATED = "BULK_UPDATED",
    DELETED = "DELETED",
    BULK_DELETED = "BULK_DELETED",
    RESTORED = "RESTORED",
    BULK_RESTORED = "BULK_RESTORED",
    UPSERTED = "UPSERTED"
}
export interface CQMetadata {
    timezone?: string;
    repositoryOptions?: LiteralObject;
}
export interface DataValueObject {
    haveToEncrypt?: boolean;
    currentTimestamp?: boolean;
    currentDate?: boolean;
    addTimezone?: string;
    removeTimezone?: string;
}
export declare enum FormatLangCode {
    ID = "id",
    IETF = "ietf",
    ISO6392 = "iso6392",
    ISO6393 = "iso6393"
}
export interface HookResponse {
    queryStatement?: QueryStatement;
    cQMetadata?: CQMetadata;
}
export interface Jwt {
    jit: string;
    aci: string;
    iss: string;
    iat: number;
    nbf: number;
    exp: number | null;
    scopes?: string;
}
export interface MapperOptions {
    eagerLoading: boolean;
}
export interface SeederBoundedContext {
    id: string;
    name: string;
    root: string;
    sort: number;
    isActive: boolean;
}
export interface SeederPermission {
    id: string;
    name: string;
    boundedContextId: string;
    roleIds?: string[];
}
export interface ValidationRules {
    name?: string;
    nullable?: boolean;
    undefinable?: boolean;
    length?: number;
    minLength?: number;
    maxLength?: number;
    enumOptions?: string[];
    decimals?: number[];
    unsigned?: boolean;
    default?: any;
}
