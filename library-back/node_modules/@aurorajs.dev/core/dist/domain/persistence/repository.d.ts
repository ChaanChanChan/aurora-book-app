import { LiteralObject } from '@nestjs/common';
import { QueryStatement } from './sql-statement/sql-statement';
import { ValueObject } from '../value-objects/value-object';
import { CQMetadata } from '../aurora.types';
import { Pagination } from '../shared/pagination';
export interface IRepository<Aggregate> {
    repository: any;
    paginate(options?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Pagination<Aggregate>>;
    find(options?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate | null>;
    findById(id: ValueObject<string>, options?: {
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate | null>;
    get(options?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    rawSQL?(options?: {
        rawSQL?: string;
        cQMetadata?: CQMetadata;
    }): Promise<Aggregate[]>;
    count(options?: {
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<number>;
    create(item: Aggregate, options?: {
        createOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        finderQueryStatement: (aggregate: Aggregate) => QueryStatement;
    }): Promise<void>;
    insert(items: Aggregate[], options?: {
        insertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    updateById(item: Aggregate, options?: {
        updateByIdOptions?: LiteralObject;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
        findArguments?: LiteralObject;
    }): Promise<void>;
    update(item: Aggregate, options?: {
        updateOptions?: LiteralObject;
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    upsert(item: Aggregate, options?: {
        upsertOptions?: LiteralObject;
        dataFactory?: (aggregate: Aggregate) => LiteralObject;
    }): Promise<void>;
    deleteById(id: ValueObject<string>, options?: {
        deleteOptions?: LiteralObject;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<void>;
    delete(options?: {
        deleteOptions?: LiteralObject;
        queryStatement?: QueryStatement;
        constraint?: QueryStatement;
        cQMetadata?: CQMetadata;
    }): Promise<void>;
}
